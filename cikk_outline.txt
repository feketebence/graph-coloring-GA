Abstract

Table of Contents

I. Introduction

II. Theoretical overview
	* Genetic algorithms in general (egyes alkotóelemeket/lépéseket nem kell részletezni, az majd a GENETIC ALGORITHM PART-ban meglesz, csak egy áttekintő kell, amolyan GA "madártávlatból")
	* Graph coloring in general

III. The selected graph coloring problems
	* Representing a Sudoku board as a graph
	* Sudoku graph coloring
	* Hypersudoku graph coloring
	* Nonomino graph coloring
(ennél a résznél mindhárom problémára kell: meghatározás - ez kb megvan, Sudoku-gráf reprezentáció, példa, példa ábrázolása Sudoku táblán, példa ábrázolása Sudoku-gráfként)

IV. (Theoretical) GENETIC ALGORITHM PART (for graph coloring)
	1. Genetic representation
	2. Fitness function
	3. Initialization
	4. Selection
	5. Crossover
	6. Mutation
	7. Survivor selection
	8. Termination condition (itt szó lehet a convergence-ről is, főleg az early convergence/possibility that the algorithm never finishes témákról)
(itt úgy gondoltam, hogy minden résznél leírjuk, hogy mit is jelent általánosan GA szempontból és mit jelent konkrétan gráfszínező-Sudoku megoldó GA esetében)

V. The implementation of a genetic algorithm for graph coloring
	Ugyanazok a részek mint a GENETIC ALGORITHM PART-nal, minden résznél:
		* short explanation (what is going to happen in this part/step? lehet nyugodtan utalni a GENETIC ALGORITHM PART-ra, főleg ezért lesz *RÖVID* ez a bekezdés)
		* pseudocode
		* Python code
		* figures (not a must, but helps the explanation a lot)
	(ennél a fejezetnél a pszeudokódokon és a Python kódrészleteken van a hangsúly, explanation-on kívűl sok szöveg nem kell, esetleg kommentek a forráskódban)

VI. Testing the algorithm on Sudoku variants
	* Problem generation method (for sudoku, hypersudoku and nonomino)
	* Testing methodology (basically timing + checking if the final solution is correct)
	* Test results (write hardware info at the beginning of each section - erre a benchmark software-t még ki kell válasszuk) [ide jönnek táblázatok]
		a. Traditional Sudoku
		b. Hypersudoku
		c. Nonomino
		(itt mindhárom rész végére egy összefoglaló bekezdés az eredményekről)

VII. Comparing the GA algorithm with backtracking
	* (Short) Overview of solving Sudoku with Backtracking
	* Execution times (GA vs Backtracking) [ide jönnek táblázatok]
		a. Traditional Sudoku
		b. Hypersudoku
		c. Nonomino
	(itt is mindhárom rész végére egy rövid összefoglaló)

	* Other algorithms for graph coloring (itt egyelore csak a Welsh-Powell algoritmust említjük)
		Welsh Powell graph coloring algorithm

VIII. Conclusion
	* Klasszikus conclusion-os section, amiben: 
		- visszautalunk a cikk elejére és elmondjuk, hogy milyen problémát (3 féle Sudoku) oldottunk meg
		- milyen megoldást választottunk a probléma megoldására (egy mondat amiben elmondjuk, hogy GA-t választottunk és utána nagyon tömör GA for graph coloring áttekintő (visszautalva az implementációs részre), ami nem hosszabb mint kb. 3 mondat)
		- [testing] + [comparing with backtracking] visszautalás/összegzés
		- konklúziók levonása 
	* Pros and Cons of the GA algorithm for Sudoku-graph coloring
(értelemszerűen ezt a fejezetet a legvégén írjuk meg, mert minden alkotóeleme egy ezelőtti fejezeten alapszik)

References